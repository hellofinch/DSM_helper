name: Flutter Android Build

on:
  push:
    branches:
      - release
  workflow_dispatch: # 允许手动触发 Workflow
    inputs: # 可选的用户输入参数
      buildType:
        description: 'Build type (release/debug)'
        required: true
        default: 'release'
      version:
        description: 'Release version'
        required: true
        default: 'noad-0.0.1'
jobs:
  build:
    name: Build Signed Flutter APK
    runs-on: ubuntu-latest

    steps:
      # Checkout repository
      - name: Checkout code
        uses: actions/checkout@v3

      # Setup Flutter
      - name: Setup Flutter 3.7.12
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.7.12'

      # Setup Java and Android SDK
      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: '17'

      - name: Setup Android SDK
        uses: android-actions/setup-android@v2
        with:
          api-level: 33
          build-tools: 33.0.2

      # Accept Android licenses
      - name: Accept Android SDK licenses
        run: yes | sdkmanager --licenses

      # Install dependencies
      - name: Install dependencies
        run: flutter pub get

      # Setup keystore and key.properties
      - name: Setup keystore and key.properties
        env:
          KEYSTORE_BASE64: ${{ secrets.ANDROID_KEYSTORE_BASE64 }}
          KEYSTORE_PASSWORD: ${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
          KEY_ALIAS: ${{ secrets.ANDROID_KEY_ALIAS }}
          KEY_PASSWORD: ${{ secrets.ANDROID_KEY_PASSWORD }}
        run: |
          echo "$KEYSTORE_BASE64" | base64 -d > android/app/key.jks
          echo "storePassword=${KEYSTORE_PASSWORD}" > android/key.properties
          echo "keyPassword=${KEY_PASSWORD}" >> android/key.properties
          echo "keyAlias=${KEY_ALIAS}" >> android/key.properties
          echo "storeFile=key.jks" >> android/key.properties

      # Build signed APK
      - name: Build signed APK
        run: flutter build apk --release

      # Create or Update Release
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.event.inputs.version }}
          release_name: "Release ${{ github.event.inputs.version }}"
          draft: false
          prerelease: false

      # Upload APK to Release
      - name: Upload APK to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: build/app/outputs/flutter-apk/app-release.apk
          asset_name: app-release.apk
          asset_content_type: application/vnd.android.package-archive
